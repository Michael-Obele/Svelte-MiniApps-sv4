diff --git a/prisma/migrations/20240714091951_/migration.sql b/prisma/migrations/20240714091951_/migration.sql
new file mode 100644
index 0000000..e1ead4f
--- /dev/null
+++ b/prisma/migrations/20240714091951_/migration.sql
@@ -0,0 +1,89 @@
+-- CreateTable
+CREATE TABLE "User" (
+    "id" TEXT NOT NULL PRIMARY KEY,
+    "username" TEXT,
+    "passwordHash" TEXT,
+    "userAuthToken" TEXT,
+    "name" TEXT,
+    "email" TEXT,
+    "emailVerified" DATETIME,
+    "image" TEXT,
+    "isAdmin" BOOLEAN NOT NULL DEFAULT false,
+    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    "updatedAt" DATETIME NOT NULL
+);
+
+-- CreateTable
+CREATE TABLE "SavePassword" (
+    "id" TEXT NOT NULL PRIMARY KEY,
+    "userId" TEXT NOT NULL,
+    "userExtraId" TEXT,
+    "password" TEXT NOT NULL,
+    "details" TEXT,
+    "title" TEXT,
+    "updatedAt" DATETIME NOT NULL,
+    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    CONSTRAINT "SavePassword_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User" ("id") ON DELETE RESTRICT ON UPDATE CASCADE
+);
+
+-- CreateTable
+CREATE TABLE "Account" (
+    "id" TEXT NOT NULL PRIMARY KEY,
+    "userId" TEXT NOT NULL,
+    "type" TEXT NOT NULL,
+    "provider" TEXT NOT NULL,
+    "providerAccountId" TEXT NOT NULL,
+    "refresh_token" TEXT,
+    "access_token" TEXT,
+    "expires_at" INTEGER,
+    "token_type" TEXT,
+    "scope" TEXT,
+    "id_token" TEXT,
+    "session_state" TEXT,
+    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    "updatedAt" DATETIME NOT NULL,
+    "userDBId" TEXT,
+    CONSTRAINT "Account_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User" ("id") ON DELETE CASCADE ON UPDATE CASCADE
+);
+
+-- CreateTable
+CREATE TABLE "Session" (
+    "id" TEXT NOT NULL PRIMARY KEY,
+    "sessionToken" TEXT NOT NULL,
+    "userId" TEXT NOT NULL,
+    "expires" DATETIME NOT NULL,
+    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    "updatedAt" DATETIME NOT NULL,
+    CONSTRAINT "Session_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User" ("id") ON DELETE CASCADE ON UPDATE CASCADE
+);
+
+-- CreateTable
+CREATE TABLE "VerificationToken" (
+    "identifier" TEXT NOT NULL,
+    "token" TEXT NOT NULL,
+    "expires" DATETIME NOT NULL
+);
+
+-- CreateIndex
+CREATE UNIQUE INDEX "User_username_key" ON "User"("username");
+
+-- CreateIndex
+CREATE UNIQUE INDEX "User_userAuthToken_key" ON "User"("userAuthToken");
+
+-- CreateIndex
+CREATE UNIQUE INDEX "User_email_key" ON "User"("email");
+
+-- CreateIndex
+CREATE UNIQUE INDEX "SavePassword_password_key" ON "SavePassword"("password");
+
+-- CreateIndex
+CREATE UNIQUE INDEX "SavePassword_userId_password_key" ON "SavePassword"("userId", "password");
+
+-- CreateIndex
+CREATE UNIQUE INDEX "Account_provider_providerAccountId_key" ON "Account"("provider", "providerAccountId");
+
+-- CreateIndex
+CREATE UNIQUE INDEX "Session_sessionToken_key" ON "Session"("sessionToken");
+
+-- CreateIndex
+CREATE UNIQUE INDEX "VerificationToken_identifier_token_key" ON "VerificationToken"("identifier", "token");
diff --git a/prisma/migrations/20240714092055_update_to_password/migration.sql b/prisma/migrations/20240714092055_update_to_password/migration.sql
new file mode 100644
index 0000000..ae29a6f
--- /dev/null
+++ b/prisma/migrations/20240714092055_update_to_password/migration.sql
@@ -0,0 +1,21 @@
+-- RedefineTables
+PRAGMA defer_foreign_keys=ON;
+PRAGMA foreign_keys=OFF;
+CREATE TABLE "new_SavePassword" (
+    "id" TEXT NOT NULL PRIMARY KEY,
+    "userId" TEXT NOT NULL,
+    "userExtraId" TEXT,
+    "password" TEXT NOT NULL,
+    "details" TEXT,
+    "title" TEXT,
+    "updatedAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    CONSTRAINT "SavePassword_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User" ("id") ON DELETE RESTRICT ON UPDATE CASCADE
+);
+INSERT INTO "new_SavePassword" ("createdAt", "details", "id", "password", "title", "updatedAt", "userExtraId", "userId") SELECT "createdAt", "details", "id", "password", "title", "updatedAt", "userExtraId", "userId" FROM "SavePassword";
+DROP TABLE "SavePassword";
+ALTER TABLE "new_SavePassword" RENAME TO "SavePassword";
+CREATE UNIQUE INDEX "SavePassword_password_key" ON "SavePassword"("password");
+CREATE UNIQUE INDEX "SavePassword_userId_password_key" ON "SavePassword"("userId", "password");
+PRAGMA foreign_keys=ON;
+PRAGMA defer_foreign_keys=OFF;
diff --git a/prisma/migrations/migration_lock.toml b/prisma/migrations/migration_lock.toml
new file mode 100644
index 0000000..e5e5c47
--- /dev/null
+++ b/prisma/migrations/migration_lock.toml
@@ -0,0 +1,3 @@
+# Please do not edit this file manually
+# It should be added in your version-control system (i.e. Git)
+provider = "sqlite"
\ No newline at end of file
diff --git a/prisma/schema.prisma b/prisma/schema.prisma
index d3dc824..6223345 100755
--- a/prisma/schema.prisma
+++ b/prisma/schema.prisma
@@ -30,6 +30,8 @@ model SavePassword {
     userExtraId String?
     password    String   @unique()
     details     String?
+    title       String?
+    updatedAt   DateTime @default(now()) @updatedAt()
     createdAt   DateTime @default(now())
     User        User     @relation(fields: [userId], references: [id])
 
diff --git a/src/routes/Apps/(app)/Random-Password-Generator/+page.server.ts b/src/routes/Apps/(app)/Random-Password-Generator/+page.server.ts
index 7cd680c..0ca7af7 100755
--- a/src/routes/Apps/(app)/Random-Password-Generator/+page.server.ts
+++ b/src/routes/Apps/(app)/Random-Password-Generator/+page.server.ts
@@ -57,9 +57,12 @@ export const actions: Actions = {
 				select: { password: true, createdAt: true },
 				orderBy: { createdAt: 'desc' }
 			});
-			// console.log('displayPassword = ', displayPassword);
-			return { displayPassword };
+			if (displayPassword.length > 0) {
+				return { displayPassword };
+			}
 		} catch (error) {
+			console.log('No password');
+			console.error(error);
 			return fail(400, { error: 'No passwords' });
 		}
 	},
diff --git a/src/routes/Apps/(app)/Random-Password-Generator/PasswordManagerSection.svelte b/src/routes/Apps/(app)/Random-Password-Generator/PasswordManagerSection.svelte
index bedbc73..5544e1d 100644
--- a/src/routes/Apps/(app)/Random-Password-Generator/PasswordManagerSection.svelte
+++ b/src/routes/Apps/(app)/Random-Password-Generator/PasswordManagerSection.svelte
@@ -3,6 +3,7 @@
 	import type { ActionData } from './$types';
 	import { page } from '$app/stores';
 	import { enhance } from '$app/forms';
+	import { afterUpdate } from 'svelte';
 
 	export let form: ActionData;
 
@@ -10,7 +11,7 @@
 </script>
 
 <section class="mx-auto my-12 w-3/4 max-w-md rounded-lg bg-white p-4 shadow-md dark:bg-gray-800">
-	<p class="mb-2 text-center text-green-500 dark:text-green-400">You can have saved passwords.</p>
+	<p class="mb-2 text-center text-green-500 dark:text-green-400">You can save passwords.</p>
 	<form use:enhance action="?/viewPasswords" method="POST" class="space-y-4">
 		<input type="hidden" name="id" value={userData?.id} />
 		{#if form?.displayPassword && form?.displayPassword.length > 0}
@@ -33,17 +34,17 @@
 				View Saved Passwords
 			</button>
 		{/if}
-		{#if form?.error}
+		{#if !form?.displayPassword}
 			<p
-				class="mt-2 block rounded bg-white p-2 text-red-500 shadow-lg dark:bg-gray-800 dark:text-red-400"
+				class="mt-2 block bg-white p-2 text-center text-red-500 dark:bg-gray-800 dark:text-red-400"
 			>
-				{form?.error}
+				No passwords to display
 			</p>
 		{:else if form?.displayPassword}
 			{#each form?.displayPassword as item}
 				<p class="mt-2 text-gray-700 dark:text-gray-300">
 					<span
-						class="mt-2 block rounded bg-white p-2 text-red-500 shadow-lg dark:bg-gray-800 dark:text-red-400"
+						class="mt-2 block rounded bg-white p-2 text-red-500 dark:bg-gray-800 dark:text-red-400"
 					>
 						{item.password}
 					</span>
