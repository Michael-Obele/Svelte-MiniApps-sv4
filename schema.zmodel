// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model UserDB {
  id            String       @id @default(uuid())
  username      String       @unique
  passwordHash  String
  userAuthToken String       @unique
  isAdmin       Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  role          Roles        @relation(fields: [roleId], references: [id])
  roleId        BigInt

  userExtras    UserExtras[]
}

model Roles {
  id    BigInt   @id @default(autoincrement())
  name  String   @unique
  users UserDB[]
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  isAdmin       Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  userExtras    UserExtras[]
}

model UserExtras {
  id                String  @id @default(cuid())
  userId            String?
  userDbId          String?
  themePreference   String?  // Preferred theme (light, dark, etc.)
  languageSetting   String?
  privacyLevel      Int? // Privacy level (public, private, friends-only)
  bio               String?  // Short bio or description
  profilePictureUrl String? // URL of the user's profile picture

  user              User?   @relation(fields: [userId], references: [id])
  userDb            UserDB? @relation(fields: [userDbId], references: [id])

  @@unique([userId])
  @@unique([userDbId])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  userDBId          String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userDBId     String?
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
