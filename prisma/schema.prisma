datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String         @id() @default(cuid())
    username      String?        @unique()
    passwordHash  String?
    userAuthToken String?        @unique()
    name          String?
    email         String?        @unique()
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    isAdmin       Boolean        @default(false)
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt()
    SavePassword  SavePassword[]
    budgets       Budget[]
}

model SavePassword {
    id          String   @id() @default(cuid())
    userId      String
    userExtraId String?
    password    String   @unique()
    details     String?  @default("")
    title       String?  @default("")
    updatedAt   DateTime @default(now()) @updatedAt()
    createdAt   DateTime @default(now())
    User        User     @relation(fields: [userId], references: [id])

    @@unique([userId, password])
}

model Account {
    id                String   @id() @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt()
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userDBId          String?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id() @default(cuid())
    sessionToken String   @unique()
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt()
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

model Budget {
    id        String    @id() @default(cuid())
    userId    String?
    name      String
    amount    Decimal
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt()
    expenses  Expense[]
    user      User?     @relation(fields: [userId], references: [id])
}

model Expense {
    id        String   @id() @default(cuid())
    budgetId  String
    name      String
    amount    Decimal
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    budget    Budget   @relation(fields: [budgetId], references: [id])
}
